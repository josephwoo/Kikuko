#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require_relative './transfer_serv_types'

module TransferServ
  class Client
    include ::Thrift::Client

    def find_file_path()
      send_find_file_path()
      return recv_find_file_path()
    end

    def send_find_file_path()
      send_message('find_file_path', Find_file_path_args)
    end

    def recv_find_file_path()
      result = receive_message(Find_file_path_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'find_file_path failed: unknown result')
    end

    def download(file_info, length, offset)
      send_download(file_info, length, offset)
      return recv_download()
    end

    def send_download(file_info, length, offset)
      send_message('download', Download_args, :file_info => file_info, :length => length, :offset => offset)
    end

    def recv_download()
      result = receive_message(Download_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'download failed: unknown result')
    end

    def already_exist(file_info)
      send_already_exist(file_info)
      return recv_already_exist()
    end

    def send_already_exist(file_info)
      send_message('already_exist', Already_exist_args, :file_info => file_info)
    end

    def recv_already_exist()
      result = receive_message(Already_exist_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'already_exist failed: unknown result')
    end

    def upload(file_info, payload)
      send_upload(file_info, payload)
      recv_upload()
    end

    def send_upload(file_info, payload)
      send_message('upload', Upload_args, :file_info => file_info, :payload => payload)
    end

    def recv_upload()
      result = receive_message(Upload_result)
      return
    end

    def print_message(msg)
      send_print_message(msg)
      recv_print_message()
    end

    def send_print_message(msg)
      send_message('print_message', Print_message_args, :msg => msg)
    end

    def recv_print_message()
      result = receive_message(Print_message_result)
      return
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_find_file_path(seqid, iprot, oprot)
      args = read_args(iprot, Find_file_path_args)
      result = Find_file_path_result.new()
      result.success = @handler.find_file_path()
      write_result(result, oprot, 'find_file_path', seqid)
    end

    def process_download(seqid, iprot, oprot)
      args = read_args(iprot, Download_args)
      result = Download_result.new()
      result.success = @handler.download(args.file_info, args.length, args.offset)
      write_result(result, oprot, 'download', seqid)
    end

    def process_already_exist(seqid, iprot, oprot)
      args = read_args(iprot, Already_exist_args)
      result = Already_exist_result.new()
      result.success = @handler.already_exist(args.file_info)
      write_result(result, oprot, 'already_exist', seqid)
    end

    def process_upload(seqid, iprot, oprot)
      args = read_args(iprot, Upload_args)
      result = Upload_result.new()
      @handler.upload(args.file_info, args.payload)
      write_result(result, oprot, 'upload', seqid)
    end

    def process_print_message(seqid, iprot, oprot)
      args = read_args(iprot, Print_message_args)
      result = Print_message_result.new()
      @handler.print_message(args.msg)
      write_result(result, oprot, 'print_message', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class Find_file_path_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Find_file_path_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::TRFileInfo}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Download_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    FILE_INFO = 1
    LENGTH = 2
    OFFSET = 3

    FIELDS = {
      FILE_INFO => {:type => ::Thrift::Types::STRUCT, :name => 'file_info', :class => ::TRFileInfo},
      LENGTH => {:type => ::Thrift::Types::I32, :name => 'length', :default => 0},
      OFFSET => {:type => ::Thrift::Types::I32, :name => 'offset', :default => 0}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Download_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success', :binary => true}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Already_exist_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    FILE_INFO = 1

    FIELDS = {
      FILE_INFO => {:type => ::Thrift::Types::STRUCT, :name => 'file_info', :class => ::TRFileInfo}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Already_exist_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Upload_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    FILE_INFO = 1
    PAYLOAD = 2

    FIELDS = {
      FILE_INFO => {:type => ::Thrift::Types::STRUCT, :name => 'file_info', :class => ::TRFileInfo},
      PAYLOAD => {:type => ::Thrift::Types::STRING, :name => 'payload', :binary => true}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Upload_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Print_message_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    MSG = 1

    FIELDS = {
      MSG => {:type => ::Thrift::Types::STRING, :name => 'msg'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Print_message_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

