/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"
#import "TAsyncTransport.h"
#import "TProtocolFactory.h"
#import "TBaseClient.h"


#import "TransferServ.h"

@implementation TRFileInfo

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithName: (NSString *) name path: (NSString *) path size: (int64_t) size
{
  self = [super init];
  __name = [name retain_stub];
  __name_isset = YES;
  __path = [path retain_stub];
  __path_isset = YES;
  __size = size;
  __size_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"path"])
  {
    __path = [[decoder decodeObjectForKey: @"path"] retain_stub];
    __path_isset = YES;
  }
  if ([decoder containsValueForKey: @"size"])
  {
    __size = [decoder decodeInt64ForKey: @"size"];
    __size_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__path_isset)
  {
    [encoder encodeObject: __path forKey: @"path"];
  }
  if (__size_isset)
  {
    [encoder encodeInt64: __size forKey: @"size"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  hash = (hash * 31) ^ __path_isset ? 2654435761 : 0;
  if (__path_isset)
  {
    hash = (hash * 31) ^ [__path hash];
  }
  hash = (hash * 31) ^ __size_isset ? 2654435761 : 0;
  if (__size_isset)
  {
    hash = (hash * 31) ^ [@(__size) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[TRFileInfo class]]) {
    return NO;
  }
  TRFileInfo *other = (TRFileInfo *)anObject;
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  if ((__path_isset != other->__path_isset) ||
      (__path_isset && ((__path || other->__path) && ![__path isEqual:other->__path]))) {
    return NO;
  }
  if ((__size_isset != other->__size_isset) ||
      (__size_isset && (__size != other->__size))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__name release_stub];
  [__path release_stub];
  [super dealloc_stub];
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) path {
  return [[__path retain_stub] autorelease_stub];
}

- (void) setPath: (NSString *) path {
  [path retain_stub];
  [__path release_stub];
  __path = path;
  __path_isset = YES;
}

- (BOOL) pathIsSet {
  return __path_isset;
}

- (void) unsetPath {
  [__path release_stub];
  __path = nil;
  __path_isset = NO;
}

- (int64_t) size {
  return __size;
}

- (void) setSize: (int64_t) size {
  __size = size;
  __size_isset = YES;
}

- (BOOL) sizeIsSet {
  return __size_isset;
}

- (void) unsetSize {
  __size_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPath: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setSize: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TRFileInfo"];
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__path_isset) {
    if (__path != nil) {
      [outProtocol writeFieldBeginWithName: @"path" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __path];
      [outProtocol writeFieldEnd];
    }
  }
  if (__size_isset) {
    [outProtocol writeFieldBeginWithName: @"size" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __size];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TRFileInfo("];
  [ms appendString: @"name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",path:"];
  [ms appendFormat: @"\"%@\"", __path];
  [ms appendString: @",size:"];
  [ms appendFormat: @"%qi", __size];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation TransferServConstants
+ (void) initialize {
}
@end

@interface find_file_path_args : NSObject <TBase, NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

@end

@implementation find_file_path_args

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[find_file_path_args class]]) {
    return NO;
  }
  find_file_path_args *other = (find_file_path_args *)anObject;
  return YES;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"find_file_path_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"find_file_path_args("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Find_file_path_result : NSObject <TBase, NSCoding> {
  NSMutableArray * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation Find_file_path_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSMutableArray *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Find_file_path_result class]]) {
    return NO;
  }
  Find_file_path_result *other = (Find_file_path_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            TRFileInfo *_elem2 = [[TRFileInfo alloc] init];
            [_elem2 read: inProtocol];
            [fieldValue addObject: _elem2];
            [_elem2 release_stub];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Find_file_path_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int idx4;
        for (idx4 = 0; idx4 < [__success count]; idx4++)
        {
          [[__success objectAtIndex: idx4] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Find_file_path_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface download_args : NSObject <TBase, NSCoding> {
  TRFileInfo * __file_info;
  int32_t __length;
  int32_t __offset;

  BOOL __file_info_isset;
  BOOL __length_isset;
  BOOL __offset_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=file_info, setter=setFile_info:) TRFileInfo * file_info;
@property (nonatomic, getter=length, setter=setLength:) int32_t length;
@property (nonatomic, getter=offset, setter=setOffset:) int32_t offset;
#endif

- (id) init;
- (id) initWithFile_info: (TRFileInfo *) file_info length: (int32_t) length offset: (int32_t) offset;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (TRFileInfo *) file_info;
- (void) setFile_info: (TRFileInfo *) file_info;
#endif
- (BOOL) file_infoIsSet;

#if !__has_feature(objc_arc)
- (int32_t) length;
- (void) setLength: (int32_t) length;
#endif
- (BOOL) lengthIsSet;

#if !__has_feature(objc_arc)
- (int32_t) offset;
- (void) setOffset: (int32_t) offset;
#endif
- (BOOL) offsetIsSet;

@end

@implementation download_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.length = 0;

  self.offset = 0;

#endif
  return self;
}

- (id) initWithFile_info: (TRFileInfo *) file_info length: (int32_t) length offset: (int32_t) offset
{
  self = [super init];
  __file_info = [file_info retain_stub];
  __file_info_isset = YES;
  __length = length;
  __length_isset = YES;
  __offset = offset;
  __offset_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"file_info"])
  {
    __file_info = [[decoder decodeObjectForKey: @"file_info"] retain_stub];
    __file_info_isset = YES;
  }
  if ([decoder containsValueForKey: @"length"])
  {
    __length = [decoder decodeInt32ForKey: @"length"];
    __length_isset = YES;
  }
  if ([decoder containsValueForKey: @"offset"])
  {
    __offset = [decoder decodeInt32ForKey: @"offset"];
    __offset_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__file_info_isset)
  {
    [encoder encodeObject: __file_info forKey: @"file_info"];
  }
  if (__length_isset)
  {
    [encoder encodeInt32: __length forKey: @"length"];
  }
  if (__offset_isset)
  {
    [encoder encodeInt32: __offset forKey: @"offset"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __file_info_isset ? 2654435761 : 0;
  if (__file_info_isset)
  {
    hash = (hash * 31) ^ [__file_info hash];
  }
  hash = (hash * 31) ^ __length_isset ? 2654435761 : 0;
  if (__length_isset)
  {
    hash = (hash * 31) ^ [@(__length) hash];
  }
  hash = (hash * 31) ^ __offset_isset ? 2654435761 : 0;
  if (__offset_isset)
  {
    hash = (hash * 31) ^ [@(__offset) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[download_args class]]) {
    return NO;
  }
  download_args *other = (download_args *)anObject;
  if ((__file_info_isset != other->__file_info_isset) ||
      (__file_info_isset && ((__file_info || other->__file_info) && ![__file_info isEqual:other->__file_info]))) {
    return NO;
  }
  if ((__length_isset != other->__length_isset) ||
      (__length_isset && (__length != other->__length))) {
    return NO;
  }
  if ((__offset_isset != other->__offset_isset) ||
      (__offset_isset && (__offset != other->__offset))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__file_info release_stub];
  [super dealloc_stub];
}

- (TRFileInfo *) file_info {
  return [[__file_info retain_stub] autorelease_stub];
}

- (void) setFile_info: (TRFileInfo *) file_info {
  [file_info retain_stub];
  [__file_info release_stub];
  __file_info = file_info;
  __file_info_isset = YES;
}

- (BOOL) file_infoIsSet {
  return __file_info_isset;
}

- (void) unsetFile_info {
  [__file_info release_stub];
  __file_info = nil;
  __file_info_isset = NO;
}

- (int32_t) length {
  return __length;
}

- (void) setLength: (int32_t) length {
  __length = length;
  __length_isset = YES;
}

- (BOOL) lengthIsSet {
  return __length_isset;
}

- (void) unsetLength {
  __length_isset = NO;
}

- (int32_t) offset {
  return __offset;
}

- (void) setOffset: (int32_t) offset {
  __offset = offset;
  __offset_isset = YES;
}

- (BOOL) offsetIsSet {
  return __offset_isset;
}

- (void) unsetOffset {
  __offset_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          TRFileInfo *fieldValue = [[TRFileInfo alloc] init];
          [fieldValue read: inProtocol];
          [self setFile_info: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setLength: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setOffset: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"download_args"];
  if (__file_info_isset) {
    if (__file_info != nil) {
      [outProtocol writeFieldBeginWithName: @"file_info" type: TType_STRUCT fieldID: 1];
      [__file_info write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__length_isset) {
    [outProtocol writeFieldBeginWithName: @"length" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __length];
    [outProtocol writeFieldEnd];
  }
  if (__offset_isset) {
    [outProtocol writeFieldBeginWithName: @"offset" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __offset];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"download_args("];
  [ms appendString: @"file_info:"];
  [ms appendFormat: @"%@", __file_info];
  [ms appendString: @",length:"];
  [ms appendFormat: @"%i", __length];
  [ms appendString: @",offset:"];
  [ms appendFormat: @"%i", __offset];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Download_result : NSObject <TBase, NSCoding> {
  NSData * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSData * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSData *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSData *) success;
- (void) setSuccess: (NSData *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation Download_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSData *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Download_result class]]) {
    return NO;
  }
  Download_result *other = (Download_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NSData *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSData *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Download_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
      [outProtocol writeBinary: __success];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Download_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"\"%@\"", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface already_exist_args : NSObject <TBase, NSCoding> {
  TRFileInfo * __file_info;

  BOOL __file_info_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=file_info, setter=setFile_info:) TRFileInfo * file_info;
#endif

- (id) init;
- (id) initWithFile_info: (TRFileInfo *) file_info;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (TRFileInfo *) file_info;
- (void) setFile_info: (TRFileInfo *) file_info;
#endif
- (BOOL) file_infoIsSet;

@end

@implementation already_exist_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithFile_info: (TRFileInfo *) file_info
{
  self = [super init];
  __file_info = [file_info retain_stub];
  __file_info_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"file_info"])
  {
    __file_info = [[decoder decodeObjectForKey: @"file_info"] retain_stub];
    __file_info_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__file_info_isset)
  {
    [encoder encodeObject: __file_info forKey: @"file_info"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __file_info_isset ? 2654435761 : 0;
  if (__file_info_isset)
  {
    hash = (hash * 31) ^ [__file_info hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[already_exist_args class]]) {
    return NO;
  }
  already_exist_args *other = (already_exist_args *)anObject;
  if ((__file_info_isset != other->__file_info_isset) ||
      (__file_info_isset && ((__file_info || other->__file_info) && ![__file_info isEqual:other->__file_info]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__file_info release_stub];
  [super dealloc_stub];
}

- (TRFileInfo *) file_info {
  return [[__file_info retain_stub] autorelease_stub];
}

- (void) setFile_info: (TRFileInfo *) file_info {
  [file_info retain_stub];
  [__file_info release_stub];
  __file_info = file_info;
  __file_info_isset = YES;
}

- (BOOL) file_infoIsSet {
  return __file_info_isset;
}

- (void) unsetFile_info {
  [__file_info release_stub];
  __file_info = nil;
  __file_info_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          TRFileInfo *fieldValue = [[TRFileInfo alloc] init];
          [fieldValue read: inProtocol];
          [self setFile_info: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"already_exist_args"];
  if (__file_info_isset) {
    if (__file_info != nil) {
      [outProtocol writeFieldBeginWithName: @"file_info" type: TType_STRUCT fieldID: 1];
      [__file_info write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"already_exist_args("];
  [ms appendString: @"file_info:"];
  [ms appendFormat: @"%@", __file_info];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Already_exist_result : NSObject <TBase, NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation Already_exist_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [@(__success) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Already_exist_result class]]) {
    return NO;
  }
  Already_exist_result *other = (Already_exist_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && (__success != other->__success))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Already_exist_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Already_exist_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface upload_args : NSObject <TBase, NSCoding> {
  TRFileInfo * __file_info;
  NSData * __payload;

  BOOL __file_info_isset;
  BOOL __payload_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=file_info, setter=setFile_info:) TRFileInfo * file_info;
@property (nonatomic, retain, getter=payload, setter=setPayload:) NSData * payload;
#endif

- (id) init;
- (id) initWithFile_info: (TRFileInfo *) file_info payload: (NSData *) payload;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (TRFileInfo *) file_info;
- (void) setFile_info: (TRFileInfo *) file_info;
#endif
- (BOOL) file_infoIsSet;

#if !__has_feature(objc_arc)
- (NSData *) payload;
- (void) setPayload: (NSData *) payload;
#endif
- (BOOL) payloadIsSet;

@end

@implementation upload_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithFile_info: (TRFileInfo *) file_info payload: (NSData *) payload
{
  self = [super init];
  __file_info = [file_info retain_stub];
  __file_info_isset = YES;
  __payload = [payload retain_stub];
  __payload_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"file_info"])
  {
    __file_info = [[decoder decodeObjectForKey: @"file_info"] retain_stub];
    __file_info_isset = YES;
  }
  if ([decoder containsValueForKey: @"payload"])
  {
    __payload = [[decoder decodeObjectForKey: @"payload"] retain_stub];
    __payload_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__file_info_isset)
  {
    [encoder encodeObject: __file_info forKey: @"file_info"];
  }
  if (__payload_isset)
  {
    [encoder encodeObject: __payload forKey: @"payload"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __file_info_isset ? 2654435761 : 0;
  if (__file_info_isset)
  {
    hash = (hash * 31) ^ [__file_info hash];
  }
  hash = (hash * 31) ^ __payload_isset ? 2654435761 : 0;
  if (__payload_isset)
  {
    hash = (hash * 31) ^ [__payload hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[upload_args class]]) {
    return NO;
  }
  upload_args *other = (upload_args *)anObject;
  if ((__file_info_isset != other->__file_info_isset) ||
      (__file_info_isset && ((__file_info || other->__file_info) && ![__file_info isEqual:other->__file_info]))) {
    return NO;
  }
  if ((__payload_isset != other->__payload_isset) ||
      (__payload_isset && ((__payload || other->__payload) && ![__payload isEqual:other->__payload]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__file_info release_stub];
  [__payload release_stub];
  [super dealloc_stub];
}

- (TRFileInfo *) file_info {
  return [[__file_info retain_stub] autorelease_stub];
}

- (void) setFile_info: (TRFileInfo *) file_info {
  [file_info retain_stub];
  [__file_info release_stub];
  __file_info = file_info;
  __file_info_isset = YES;
}

- (BOOL) file_infoIsSet {
  return __file_info_isset;
}

- (void) unsetFile_info {
  [__file_info release_stub];
  __file_info = nil;
  __file_info_isset = NO;
}

- (NSData *) payload {
  return [[__payload retain_stub] autorelease_stub];
}

- (void) setPayload: (NSData *) payload {
  [payload retain_stub];
  [__payload release_stub];
  __payload = payload;
  __payload_isset = YES;
}

- (BOOL) payloadIsSet {
  return __payload_isset;
}

- (void) unsetPayload {
  [__payload release_stub];
  __payload = nil;
  __payload_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          TRFileInfo *fieldValue = [[TRFileInfo alloc] init];
          [fieldValue read: inProtocol];
          [self setFile_info: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setPayload: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"upload_args"];
  if (__file_info_isset) {
    if (__file_info != nil) {
      [outProtocol writeFieldBeginWithName: @"file_info" type: TType_STRUCT fieldID: 1];
      [__file_info write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__payload_isset) {
    if (__payload != nil) {
      [outProtocol writeFieldBeginWithName: @"payload" type: TType_STRING fieldID: 2];
      [outProtocol writeBinary: __payload];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"upload_args("];
  [ms appendString: @"file_info:"];
  [ms appendFormat: @"%@", __file_info];
  [ms appendString: @",payload:"];
  [ms appendFormat: @"\"%@\"", __payload];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Upload_result : NSObject <TBase, NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

@end

@implementation Upload_result

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Upload_result class]]) {
    return NO;
  }
  Upload_result *other = (Upload_result *)anObject;
  return YES;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Upload_result"];

  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Upload_result("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface print_message_args : NSObject <TBase, NSCoding> {
  NSString * __msg;

  BOOL __msg_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=msg, setter=setMsg:) NSString * msg;
#endif

- (id) init;
- (id) initWithMsg: (NSString *) msg;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) msg;
- (void) setMsg: (NSString *) msg;
#endif
- (BOOL) msgIsSet;

@end

@implementation print_message_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithMsg: (NSString *) msg
{
  self = [super init];
  __msg = [msg retain_stub];
  __msg_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"msg"])
  {
    __msg = [[decoder decodeObjectForKey: @"msg"] retain_stub];
    __msg_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__msg_isset)
  {
    [encoder encodeObject: __msg forKey: @"msg"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __msg_isset ? 2654435761 : 0;
  if (__msg_isset)
  {
    hash = (hash * 31) ^ [__msg hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[print_message_args class]]) {
    return NO;
  }
  print_message_args *other = (print_message_args *)anObject;
  if ((__msg_isset != other->__msg_isset) ||
      (__msg_isset && ((__msg || other->__msg) && ![__msg isEqual:other->__msg]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__msg release_stub];
  [super dealloc_stub];
}

- (NSString *) msg {
  return [[__msg retain_stub] autorelease_stub];
}

- (void) setMsg: (NSString *) msg {
  [msg retain_stub];
  [__msg release_stub];
  __msg = msg;
  __msg_isset = YES;
}

- (BOOL) msgIsSet {
  return __msg_isset;
}

- (void) unsetMsg {
  [__msg release_stub];
  __msg = nil;
  __msg_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMsg: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"print_message_args"];
  if (__msg_isset) {
    if (__msg != nil) {
      [outProtocol writeFieldBeginWithName: @"msg" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __msg];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"print_message_args("];
  [ms appendString: @"msg:"];
  [ms appendFormat: @"\"%@\"", __msg];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Print_message_result : NSObject <TBase, NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

@end

@implementation Print_message_result

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Print_message_result class]]) {
    return NO;
  }
  Print_message_result *other = (Print_message_result *)anObject;
  return YES;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Print_message_result"];

  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Print_message_result("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TransferServClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  inProtocol = [anInProtocol retain_stub];
  outProtocol = [anOutProtocol retain_stub];
  return self;
}

- (void) send_find_file_path
{
  [outProtocol writeMessageBeginWithName: @"find_file_path" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"find_file_path_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (NSMutableArray *) recv_find_file_path
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  Find_file_path_result * result = [[[Find_file_path_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"find_file_path failed: unknown result"];
}

- (NSMutableArray *) find_file_path
{
  [self send_find_file_path];
  [[outProtocol transport] flush];
  return [self recv_find_file_path];
}

- (void) send_download: (TRFileInfo *) file_info length: (int32_t) length offset: (int32_t) offset
{
  [outProtocol writeMessageBeginWithName: @"download" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"download_args"];
  if (file_info != nil)  {
    [outProtocol writeFieldBeginWithName: @"file_info" type: TType_STRUCT fieldID: 1];
    [file_info write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"length" type: TType_I32 fieldID: 2];
  [outProtocol writeI32: length];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"offset" type: TType_I32 fieldID: 3];
  [outProtocol writeI32: offset];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (NSData *) recv_download
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  Download_result * result = [[[Download_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"download failed: unknown result"];
}

- (NSData *) download: (TRFileInfo *) file_info length: (int32_t) length offset: (int32_t) offset
{
  [self send_download : file_info length: length offset: offset];
  [[outProtocol transport] flush];
  return [self recv_download];
}

- (void) send_already_exist: (TRFileInfo *) file_info
{
  [outProtocol writeMessageBeginWithName: @"already_exist" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"already_exist_args"];
  if (file_info != nil)  {
    [outProtocol writeFieldBeginWithName: @"file_info" type: TType_STRUCT fieldID: 1];
    [file_info write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (BOOL) recv_already_exist
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  Already_exist_result * result = [[[Already_exist_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"already_exist failed: unknown result"];
}

- (BOOL) already_exist: (TRFileInfo *) file_info
{
  [self send_already_exist : file_info];
  [[outProtocol transport] flush];
  return [self recv_already_exist];
}

- (void) send_upload: (TRFileInfo *) file_info payload: (NSData *) payload
{
  [outProtocol writeMessageBeginWithName: @"upload" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"upload_args"];
  if (file_info != nil)  {
    [outProtocol writeFieldBeginWithName: @"file_info" type: TType_STRUCT fieldID: 1];
    [file_info write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (payload != nil)  {
    [outProtocol writeFieldBeginWithName: @"payload" type: TType_STRING fieldID: 2];
    [outProtocol writeBinary: payload];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (void) recv_upload
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  Upload_result * result = [[[Upload_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  return;
}

- (void) upload: (TRFileInfo *) file_info payload: (NSData *) payload
{
  [self send_upload : file_info payload: payload];
  [[outProtocol transport] flush];
  [self recv_upload];
}

- (void) send_print_message: (NSString *) msg
{
  [outProtocol writeMessageBeginWithName: @"print_message" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"print_message_args"];
  if (msg != nil)  {
    [outProtocol writeFieldBeginWithName: @"msg" type: TType_STRING fieldID: 1];
    [outProtocol writeString: msg];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (void) recv_print_message
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  Print_message_result * result = [[[Print_message_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  return;
}

- (void) print_message: (NSString *) msg
{
  [self send_print_message : msg];
  [[outProtocol transport] flush];
  [self recv_print_message];
}

@end

@implementation TransferServProcessor

- (id) initWithTransferServ: (id <TransferServ>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
  SEL s = @selector(process_find_file_path_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"find_file_path"];
}
{
  SEL s = @selector(process_download_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"download"];
}
{
  SEL s = @selector(process_already_exist_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"already_exist"];
}
{
  SEL s = @selector(process_upload_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"upload"];
}
{
  SEL s = @selector(process_print_message_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"print_message"];
}
return self;
}

- (id<TransferServ>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_find_file_path_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
find_file_path_args * args = [[find_file_path_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
Find_file_path_result * result = [[Find_file_path_result alloc] init];
[result setSuccess: [mService find_file_path]];
[outProtocol writeMessageBeginWithName: @"find_file_path"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_download_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
download_args * args = [[download_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
Download_result * result = [[Download_result alloc] init];
[result setSuccess: [mService download: [args file_info] length: [args length] offset: [args offset]]];
[outProtocol writeMessageBeginWithName: @"download"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_already_exist_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
already_exist_args * args = [[already_exist_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
Already_exist_result * result = [[Already_exist_result alloc] init];
[result setSuccess: [mService already_exist: [args file_info]]];
[outProtocol writeMessageBeginWithName: @"already_exist"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_upload_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
upload_args * args = [[upload_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
Upload_result * result = [[Upload_result alloc] init];
[mService upload: [args file_info] payload: [args payload]];
[outProtocol writeMessageBeginWithName: @"upload"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_print_message_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
print_message_args * args = [[print_message_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
Print_message_result * result = [[Print_message_result alloc] init];
[mService print_message: [args msg]];
[outProtocol writeMessageBeginWithName: @"print_message"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

